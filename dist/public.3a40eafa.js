function runCoordinateTests(){console.log("\uD83E\uDDEA Running Coordinate Parsing Tests...");let e=0,t=0;for(let o of[{name:"Basic key-value format",input:"x:100 y:200 z:300",expected:{x:100,y:200,z:300,distance:1e3,direction:null}},{name:"Key-value with distance and direction",input:"x:0 y:1500 z:3500 d:3808 n:S.180",expected:{x:0,y:1500,z:3500,distance:3808,direction:"S.180"}},{name:"Negative coordinates",input:"x:-115 y:-1546 z:3248 d:3 n:sw.215",expected:{x:-115,y:-1546,z:3248,distance:3,direction:"sw.215"}},{name:"Problem case 1: -734.700.1370.10.ne.80",input:"-734.700.1370.10.ne.80",expected:{x:-734,y:700,z:1370,distance:10,direction:"ne.80"}},{name:"Problem case 2: -1160.729.1189.961.SE.121",input:"-1160.729.1189.961.SE.121",expected:{x:-1160,y:729,z:1189,distance:961,direction:"SE.121"}},{name:"Problem case 3: 0.1500.3500.3808.S.120",input:"0.1500.3500.3808.S.120",expected:{x:0,y:1500,z:3500,distance:3808,direction:"S.120"}}]){console.log(`
\u{1F9EA} Testing: ${o.name}`),console.log(`   Input: "${o.input}"`);try{let n=parseCoordinateInput(o.input);console.log("   Result:",n),console.log("   Expected:",o.expected),n.x===o.expected.x&&n.y===o.expected.y&&n.z===o.expected.z&&n.distance===o.expected.distance&&n.direction===o.expected.direction?(console.log(`   \u{2705} PASSED`),e++):(console.error(`   \u{274C} FAILED`),console.error("   Differences:",{x:n.x!==o.expected.x?`got ${n.x}, expected ${o.expected.x}`:"OK",y:n.y!==o.expected.y?`got ${n.y}, expected ${o.expected.y}`:"OK",z:n.z!==o.expected.z?`got ${n.z}, expected ${o.expected.z}`:"OK",distance:n.distance!==o.expected.distance?`got ${n.distance}, expected ${o.expected.distance}`:"OK",direction:n.direction!==o.expected.direction?`got ${n.direction}, expected ${o.expected.direction}`:"OK"}),t++)}catch(e){console.error(`   \u{274C} ERROR:`,e),t++}}return console.log(`
\u{1F9EA} Test Results: ${e} passed, ${t} failed`),0===t?console.log("\uD83C\uDF89 All tests passed!"):console.error("❌ Some tests failed. Check the parsing logic."),{passed:e,failed:t}}function testNavigation(){for(let e of(console.log("\uD83D\uDE80 Testing Navigation System..."),[{name:"Simple test case",input:"0.100.200.50",expected:{x:0,y:100,z:200,distance:50}},{name:"Problem case 1",input:"-734.700.1370.10.ne.80",expected:{x:-734,y:700,z:1370,distance:10}}])){console.log(`
\u{1F680} Testing navigation: ${e.name}`),console.log(`   Input: "${e.input}"`);let t=parseCoordinateInput(e.input);console.log("   Parsed:",t),console.log("   Expected:",e.expected),console.log("   Before navigation - Camera:",{position:{x:camera.position.x,y:camera.position.y,z:camera.position.z},target:{x:controls.target.x,y:controls.target.y,z:controls.target.z}}),console.log(`   Calling goToPosition(${t.x}, ${t.y}, ${t.z}, ${t.distance}, "${t.direction}")...`),goToPosition(t.x,t.y,t.z,t.distance,t.direction),setTimeout(()=>{let e={position:{x:Math.round(camera.position.x),y:Math.round(camera.position.y),z:Math.round(camera.position.z)},target:{x:Math.round(controls.target.x),y:Math.round(controls.target.y),z:Math.round(controls.target.z)}};console.log("   After navigation - Camera:",e),1>Math.abs(e.target.x-t.x)&&1>Math.abs(e.target.y-t.y)&&1>Math.abs(e.target.z-t.z)?console.log(`   \u{2705} Target matches parsed coordinates`):(console.error(`   \u{274C} Target doesn't match!`),console.error(`   Expected target: x:${t.x}, y:${t.y}, z:${t.z}`),console.error(`   Actual target: x:${e.target.x}, y:${e.target.y}, z:${e.target.z}`))},2e3)}}function testNavigationLock(){console.log("\uD83D\uDD12 Testing Navigation Lock System...");let e=[{name:"First call",input:"100.200.300.50",expected:{x:100,y:200,z:300}},{name:"Second call (should cancel first)",input:"0.500.1000.75",expected:{x:0,y:500,z:1e3}},{name:"Third call (should cancel second)",input:"-200.800.600.100",expected:{x:-200,y:800,z:600}}];console.log("\uD83D\uDE80 Making rapid sequential navigation calls..."),console.log("\uD83D\uDCCD Initial state:",{position:{x:camera.position.x,y:camera.position.y,z:camera.position.z},target:{x:controls.target.x,y:controls.target.y,z:controls.target.z}}),e.forEach((e,t)=>{let o=parseCoordinateInput(e.input);console.log(`\u{1F680} Call ${t+1} - ${e.name}: goToPosition(${o.x}, ${o.y}, ${o.z}, ${o.distance||50})`),console.log(`   Navigation lock before call: ${navigationLock()}`),goToPosition(o.x,o.y,o.z,o.distance||50,o.direction),console.log(`   Navigation lock after call: ${navigationLock()}`),console.log(`   Animation ID after call: ${currentAnimationId()?"Active":"None"}`)}),console.log("⏳ Waiting 3 seconds for final animation to complete..."),setTimeout(()=>{let t={position:{x:Math.round(camera.position.x),y:Math.round(camera.position.y),z:Math.round(camera.position.z)},target:{x:Math.round(controls.target.x),y:Math.round(controls.target.y),z:Math.round(controls.target.z)}};console.log("\uD83D\uDCCD Final state:",t),console.log(`\u{1F512} Final navigation lock: ${navigationLock()}`),console.log(`\u{1F3AC} Final animation ID: ${currentAnimationId()?"Active":"None"}`);let o=parseCoordinateInput(e[2].input);5>Math.abs(t.target.x-o.x)&&5>Math.abs(t.target.y-o.y)&&5>Math.abs(t.target.z-o.z)?console.log("✅ Navigation lock test PASSED - Final position matches last call"):(console.error("❌ Navigation lock test FAILED - Final position does not match last call"),console.error(`   Expected: x:${o.x}, y:${o.y}, z:${o.z}`),console.error(`   Actual: x:${t.target.x}, y:${t.target.y}, z:${t.target.z}`)),navigationLock()||currentAnimationId()?console.error("❌ Navigation still locked or animation still running"):console.log("✅ Navigation properly unlocked after completion")},3e3)}window.runCoordinateTests=runCoordinateTests,window.testNavigation=testNavigation,window.testNavigationLock=testNavigationLock;
//# sourceMappingURL=public.3a40eafa.js.map
